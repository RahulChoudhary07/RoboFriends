{"version":3,"sources":["components/Robo.js","components/Robotsarray.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Robo","props","className","alt","src","id","name","username","email","Robotsarray","roboarray","robots","map","user","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","isError","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filterArray","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kOAsBeA,EAnBJ,SAACC,GAIR,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAAMI,MACrD,6BACI,wBAAIH,UAAU,MAAMD,EAAMK,MAC1B,4BAAKL,EAAMM,UACX,4BAAKN,EAAMO,UCCZC,EAXI,SAAC,GAAY,IACzBC,EADwB,EAAVC,OACGC,KAAI,SAACC,GAC3B,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAKR,GAAIA,GAAIQ,EAAKR,GAAIC,KAAMO,EAAKP,KAAME,MAAOK,EAAKL,MAAOD,SAAUM,EAAKN,cAE5F,OACC,6BACEG,ICMWK,EAbC,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,aACjB,OACC,yBAAKd,UAAU,OACd,2BACAA,UAAU,iCACVe,KAAK,YACLC,YAAY,gBACZC,SAAUH,MCGEI,G,MAVD,SAACnB,GAGd,OACC,yBAAKoB,MAAO,CAAEC,UAAU,SAAUC,OAAO,kBAAmBC,OAAO,UACjEvB,EAAMwB,YCgBKC,E,kDApBd,aAAc,IAAD,8BACZ,gBACKC,MAAM,CACVC,SAAQ,GAHG,E,gEAQZC,KAAKC,SAAS,CAACF,SAAQ,M,+BAGvB,OAAGC,KAAKF,MAAMC,QACN,4DAGAC,KAAK5B,MAAMwB,a,GAhBOM,aC6DbC,E,kDAtDd,aAAc,IAAD,8BACZ,gBAaDC,eAAe,SAACC,GACf,EAAKJ,SAAS,CAAEK,YAAYD,EAAME,OAAOC,SAbzC,EAAKV,MAAM,CACVhB,OAAQ,GACRwB,YAAa,IAJF,E,gEASO,IAAD,OAClBG,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UAAQF,MAAK,SAAAG,GAAQ,EAAKZ,SAAS,CAACnB,OAAO+B,S,+BAU/G,IAAD,OAEDC,EAAYd,KAAKF,MAAMhB,OAAOiC,QAAO,SAAAC,GAC1C,OAAOA,EAAMvC,KAAKwC,cAAcC,SAAS,EAAKpB,MAAMQ,YAAYW,kBAGjE,OAA8B,IAA3BjB,KAAKF,MAAMhB,OAAOqC,OAGnB,yBAAK9C,UAAU,MACd,2CAQF,yBAAKA,UAAU,MACd,wBAAIA,UAAU,MAAd,gBACA,kBAAC,EAAD,CAAWc,aAAca,KAAKI,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAatB,OAAQgC,W,GA5CTZ,aCIEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OAAO,kBAAC,EAAD,MACXC,SAASC,eAAe,SDyHvB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.5b3b51c4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Robo=(props)=>{\r\n    // if(true){\r\n    //     throw new Error('nooooooo!!');\r\n    // }\r\n    return(\r\n        <div className='tc bg-light-green dib br3 pa3 ma3 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${props.id}`}/>\r\n            <div>\r\n                <h1 className=\"f3\">{props.name}</h1>\r\n                <h2>{props.username}</h2>\r\n                <h3>{props.email}</h3>\r\n                \r\n            </div>\r\n        </div>\r\n\r\n\r\n    );\r\n}\r\n\r\nexport default Robo;","import React from 'react';\r\nimport Robo from './Robo';\r\n\r\nconst Robotsarray =({robots})=>{\r\n\tconst roboarray=robots.map((user)=>{\r\n\t\treturn <Robo key={user.id} id={user.id} name={user.name} email={user.email} username={user.username} />\r\n\t});\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{roboarray}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Robotsarray;","import React from 'react';\r\n\r\nconst SearchBox=({searchChange})=>{\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n\t\t\t<input\r\n\t\t\tclassName='pa3 bg-lightest-blue b--green ' \r\n\t\t\ttype=\"searchbox\" \r\n\t\t\tplaceholder=\"Search Robots\"\r\n\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll =(props)=>{\r\n\t// console.log(props.children);\r\n\t\r\n\treturn(\r\n\t\t<div style={{ overflowY:'scroll', border:'2px solid black', height:'800px' }}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component{\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.state={\r\n\t\t\tisError:false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(){\r\n\t\tthis.setState({isError:true});\r\n\t}\r\n\trender(){\r\n\t\tif(this.state.isError){\r\n\t\t\treturn <h1>Opps something went wrong!!!</h1>\r\n\t\t}\r\n\t\telse{\r\n\t\t\treturn this.props.children\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","import React, {Component} from 'react';\r\nimport Robotsarray from '../components/Robotsarray';\r\n// import {robots} from './robots';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\n\r\nclass App extends Component{\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state={\r\n\t\t\trobots: [],\r\n\t\t\tsearchfield :'',\r\n\t\t};\r\n\t\t// console.log('constructor');\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users').then(response=>response.json()).then(users=>{this.setState({robots:users})});\r\n\t\t// console.log('componentDidMount');\r\n\t}\r\n\r\n\tonSearchChange=(event)=>{\r\n\t\tthis.setState({ searchfield:event.target.value });\r\n\t\t// console.log('onSearchChange');\r\n\t\t\r\n\t}\r\n\r\n\trender(){\r\n\t\t\r\n\t\tconst filterArray=this.state.robots.filter(robot=>{\r\n\t\t\treturn robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n\t\t})\r\n\t\t// console.log('render');\r\n\t\tif(this.state.robots.length===0){\r\n\t\t\treturn(\r\n\r\n\t\t\t\t<div className='tc'>\r\n\t\t\t\t\t<h1>Loading...</h1>\r\n\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t\t\r\n\t\t}\r\n\t\telse{\r\n\t\t\treturn(\r\n\t\t\t<div className='tc'>\r\n\t\t\t\t<h1 className='f1'>Robo Friends</h1>\r\n\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t<Robotsarray robots={filterArray}/>\r\n\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t);\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(<App/>\n\t\t\t\t,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}